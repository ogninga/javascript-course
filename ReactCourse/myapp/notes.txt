***************************
Useeffect
**************************
#2

#1import { useEffect, useState } from "react";

function App() {
  const [value, setValue] = useState(0);

  useEffect(() => {
    console.log("Hello");
    document.title = `increment(${value})`;
  }, [value]);

  return (
    <>
      <h1>{value}</h1>
      <button onClick={() => setValue(value + 1)}>Click Me</button>
    </>
  );
}

export default App;


*****************************
forms
***************************
import { useState } from "react";

function App() {
  const [username, setUsername] = useState("");

  const handleChange = (event) => {
    setUsername(event.target.value);
  };
  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`You typed: ${username}`);
    setUsername("");
  };

  return (
    <>
      <h1>Form Demo</h1>
      <form onSubmit={handleSubmit}>
        <input type="text" value={username} onChange={handleChange} />
        <button>submit</button>
      </form>
    </>
  );
}

export default App;



*********************************
States
*****************************
#4 array states
import { useState } from "react";

function App() {
  const [movies, setMovie] = useState([
    { id: 1, title: "spiderman", ratings: 3 },
    { id: 2, title: "superman", ratings: 6 },
  ]);

  const handleClick = () => {
    setMovie(
      movies.map((m) => (m.id === 1 ? { ...movies, title: "john wick 4" } : m))
    );
  };

  return (
    <>
      {movies.map((movie) => (
        <li key={Math.random()}>{movie.title}</li>
      ))}
      <button onClick={handleClick}>Change Name</button>
    </>
  );
}

export default App;

#3 change objects of states
import { useState } from "react";

function App() {
  const [movie, setMovie] = useState({
    title: "Equlizer 3",
    rating: 7,
  });

  const handleClick = () => {
    const copyMovie = {
      ...movie,
      rating: 5,
    };
    setMovie(copyMovie);
  };

  return (
    <>
      <h1>{movie.title}</h1>
      <p>{movie.rating}</p>
      <button onClick={handleClick}>Change Rating</button>
    </>
  );
}

export default App;

#2 change array of states import { useState } from "react";

function App() {
  const [friends, setFriends] = useState(["Alex", "John"]);
  const addOne = () => {
    setFriends([...friends, "Billy"]);
  };
  const removeOne = () => {
    setFriends(friends.filter((f) => f !== "Alex"));
  };
  const updateOne = () => {
    setFriends(friends.map((f) => (f === "Alex" ? "Alex Smith" : f)));
  };
  return (
    <>
      {friends.map((f) => (
        <li key={Math.random()}>{f}</li>
      ))}
      <button onClick={addOne}>Add One</button>
      <button onClick={removeOne}>Remove One</button>
      <button onClick={updateOne}>Update One</button>
    </>
  );
}

export default App;




#1 import { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0);
  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };
  return (
    <>
      <h1>{count}</h1>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
    </>
  );
};

function App() {
  return (
    <>
      <Counter />
    </>
  );
}

export default App;









***************************************
Event listener
*****************************
#3 const Move = () => {
  const moveHandler = () => {
    alert("ouch!");
  };
  return (
    <>
      <p onMouseMove={moveHandler}>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam ratione
        corrupti sunt quae excepturi magni delectus dicta iure rem accusantium!
      </p>
    </>
  );
};

function App() {
  return (
    <>
      <Move />
    </>
  );
}

export default App;
#2 const Copy = () => {
  const copyHandler = () => {
    alert("stop it biyatch");
  };
  return (
    <>
      <p onCopy={copyHandler}>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad quibusdam
        corrupti voluptatem reprehenderit eveniet veniam, unde labore eum nobis
        itaque ullam qui dolorum ipsum placeat ratione! Consequatur saepe ipsa
        dolores.
      </p>
    </>
  );
};

function App() {
  return (
    <>
      <Copy />
    </>
  );
}
#1 //need the arrow function before handle click in order for the action not to run before the function runs.

const Button = () => {
  const handleClick = (a, b) => {
    console.log(a + b);
  };
  return <button onClick={()=>handleClick(2,2)}> Click</button>;
};
function App() {
  return (
    <>
      <Button />
    </>
  );
}

export default App;















*************************************
Icons
******************************

import { BsFillCartCheckFill, BsGithub } from "react-icons/bs";

import "./index.css";

function App() {
  return (
    <>
      <BsFillCartCheckFill />
      <BsGithub />
    </>
  );
}

export default App;













****************************

ways to apply styling
**********
#3import "./index.css";

function App() {
  return (
    <>
      <h1>Hello I am React</h1>
    </>
  );
}

export default App;


***************************
#2 stylingfunction App() {
  const difsty = {
    color: "red",
    backgroundColor: "orange",
  };
  return (
    <>
      <h1
        style={{ color: difsty.color, backgroundColor: difsty.backgroundColor }}
      >
        Hello I am React
      </h1>
    </>
  );
}

export default App;

******************
#1 styling

function App() {
  return (
    <>
      <h1 style={{ color: "blue", backgroundColor: "green" }}>
        Hello I am React
      </h1>
    </>
  );
}

export default App;















****************************

Conditional Rendering
**********
#3 terneary operator

const ValidPassword = () => <h1>Valid Password</h1>;
const InvalidPassword = () => <h1>Invalid Password</h1>;

const Password = (isValid) => {
  // if (isValid) {
  //   return <ValidPassword />;
  // } else {
  //   return <InvalidPassword />;
  // }

  return isValid ? <ValidPassword /> : <InvalidPassword />;
};

function App() {
  return (
    <>
      <Password isValid={true} />
    </>
  );
}

export default App;










********************
#2 &&


const Cart = () => {
  const items = ["wireless earbuds", "headphones", "laptop", "camera", "phone"];

  return (
    <>
      <h1>Cart</h1>
      {items.length > 0 && <h2>You have {items.length} items in your cart</h2>}

      <ul>
        <h4>products</h4>
        {items.map((item) => (
          <li key={Math.random()}>{item}</li>
        ))}
      </ul>
    </>
  );
};

function App() {
  return (
    <>
      <Cart />
    </>
  );
}

export default App;


***************
#1 if statement

const ValidPassword = () => <h1>Valid Password</h1>;
const InvalidPassword = () => <h1>Invalid Password</h1>;

const Password = (isValid) => {
  if (isValid) {
    return <ValidPassword />;
  } else {
    return <InvalidPassword />;
  }
};

function App() {
  return (
    <>
      <Password isValid={true} />
    </>
  );
}

export default App;















****************************

Props
**********
#children props
// must use special word children

const User = ({ img, name, hobbies, children }) => {
  console.log(name);
  return (
    <section>
      <img src={img} alt={name} />
      <h1> name: {name}</h1>
      <h3>hobbies: {hobbies}</h3>
      {children}
    </section>
  );
};
// made the user component and open and closing tag, putting the data in user kinda like an html document, and between the tags the children
function App() {
  return (
    <>
      <User
        img="https://th.bing.com/th/id/OIP.B29P-JotxZYlRA7smM4ghAHaE8?rs=1&pid=ImgDetMain"
        name="John"
        age={18}
        hobbies={["coding ", "reading ", "sleeping "]}
        realData={{ name: "alex", location: "new york" }}
      >
        <p>
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est harum
          repellendus quia dolorem doloribus consequatur error laudantium
          delectus ab mollitia.
        </p>
      </User>
    </>
  );
}

export default App;


******
#2 props destructuring

 can just call the items in the const user my preferred way to use it

const User = ({ img, name, hobbies }) => {
  console.log(name);
  return (
    <section>
      <img src={img} alt={name} />
      <h1> name: {name}</h1>
      <h3>hobbies: {hobbies}</h3>
    </section>
  );
};

function App() {
  return (
    <>
      <User
        img="https://th.bing.com/th/id/OIP.B29P-JotxZYlRA7smM4ghAHaE8?rs=1&pid=ImgDetMain"
        name="John"
        age={18}
        hobbies={["coding ", "reading ", "sleeping "]}
        realData={{ name: "alex", location: "new york" }}
      />
    </>
  );
}

export default App;






*****
#1const User = (props) => {
  console.log(props.name);
  return (
    <section>
      <img src={props.img} alt="props.name" />
      <h1> name: {props.name}</h1>
      <h3>hobbies: {props.hobbies}</h3>
      <p>{props.realData.name}</p>
    </section>
  );
};

function App() {
  return (
    <>
      <User
        img="https://th.bing.com/th/id/OIP.B29P-JotxZYlRA7smM4ghAHaE8?rs=1&pid=ImgDetMain"
        name="John"
        age={18}
        hobbies={["coding ", "reading ", "sleeping "]}
        realData={{ name: "alex", location: "new york" }}
      />
    </>
  );
}

export default App;











*****************************
Lists continued
*******************************

The code defines a functional component named App.
Inside the component, there's an array called userInfo, containing objects with user information (username, email, and location).
The component returns JSX (React elements) using the fragment syntax (<> ... </>).
It utilizes the map function to iterate over each object in the userInfo array.
For each user object, it generates a <ul> (unordered list) element with a unique key attribute.
Inside each <ul> element, it generates three <li> (list item) elements to display the user's username, email, and location.
The values for each user are dynamically inserted using JSX curly braces {}.
The key attribute for each <ul> element is set to a random value generated using Math.random() to help React efficiently update and manage the list.
The entire JSX is wrapped in a fragment (<> ... </>) to avoid unnecessary parent elements in the DOM.
The component is exported as the default export (export default App;), making it available for use in other parts of the application.
In summary, the App component maps over an array of user information, creating a list of unordered lists where each list item displays details about a user (username, email, and location). The unique key attribute helps React efficiently handle updates in the list.








function App() {
  const userInfo = [
    {
      username: "Leslie",
      email: "test@gmail.com",
      location: "UK",
    },
    {
      username: "pookie",
      email: "test@gmail.com",
      location: "Uganda",
    },
    {
      username: "ray ray",
      email: "test@gmail.com",
      location: "Usa",
    },
  ];

  return (
    <>
      {userInfo.map((user) => (
        <ul key={Math.random() * 10}>
          <li>{user.username}</li>
          <li>{user.email}</li>
          <li>{user.location}</li>
        </ul>
      ))}
    </>
  );
}

export default App;







***********************************




// import { Component } from "react";
// class App extends Component {
//   //to show content on the screen
//   render() {
//     return <h1>Hello Boogey bads</h1>;
//   }
// }

// function App() {
//   return (
//     // using className not class to style html
//     // <h1 className="title-class">Title</h1>
//     //htmlFor instead of for
//     // <form>

//     //   <label htmlFor="name">Name</label>
//     //   <input type="text" id="name" />
//     // </form>

// );
// }

// export default App;

// import Add from "./components/Add";
// import Greetings from "./components/greetings";

// import { Fragment } from "react";
// can use <> </> as a fragment as well.
function App() {
  // const myName = "emmanuel";
  // const multiply = (a, b) => a * b;
  // const specialClass = "simple class";

  //Example #1
  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

  return (
    <>
      {/* if you want to return value use {}with return if not use () if no value is desired. */}
      {numbers.map((number) => (
        // always need a key if using a list of elements
        <ul key={Math.random() * 10}>
          <li>{number}</li>
        </ul>
      ))}
    </>
    // <>
    //   <h1>{myName}</h1>
    //   <p>2 * 4 = {2 * 4}</p>
    //   <p>My Firends List: {["alex", "john", "fuby"]}</p>
    //   <p>2 * 2 = {multiply(2, 2)}</p>
    //   <p className={specialClass}>a special class</p>
    // </>

    // <>
    //   { fragments/* <Greetings />
    //   <Add /> */}
    // </>
  );
}